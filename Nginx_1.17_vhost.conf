server {
	proxy_buffers 32 128k;
	proxy_buffer_size 256k;
	fastcgi_buffers 32 128k;
	fastcgi_buffer_size 256k;

	listen					%ip%:%httpport%;
	listen					%ip%:%httpsport% ssl http2;

	server_name				%host% %aliases%;
	limit_conn				addr 64;
	root					'%hostdir%/web';

	ssl_certificate			'%sprogdir%/userdata/config/cert_files/server.crt';
	ssl_certificate_key		'%sprogdir%/userdata/config/cert_files/server.key';
	# ssl_trusted_certificate	'';

	# Force HTTPS
	# add_header Strict-Transport-Security 'max-age=2592000' always;
	# if ($scheme ~* ^(?!https).*$) {
	#    return 301 https://$host$request_uri;
	# }

	# Force www.site.com => site.com
	# if ($host ~* ^www\.(.+)$) {
	#    return 301 $scheme://$1$request_uri;
	# }

	# Disable access to backup/config/command/log files
	# if ($uri ~* ^.+\.(?:bak|co?nf|in[ci]|log|orig|sh|sql|tar|sql|t?gz|cmd|bat)$) {
	#    return 404;
	# }

	# Disable access to hidden files/folders
	if ($uri ~* /\.(?!well-known)) {
		return 404;
	}

	# Disable MIME sniffing
	add_header X-Content-Type-Options 'nosniff' always;

	location ~* ^.+\.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv|svgz?|ttf|ttc|otf|eot|woff2?)$ {
		expires 1d;
		access_log off;
	}

	# if ($request_method !~* ^(GET|HEAD|POST)$ ){return 403;}
	location ~ /\. {deny all;}

	# optionally disable falling back to PHP script for the asset directories;
	# nginx will return a 404 error when files are not found instead of passing the
	# request to Symfony (improves performance but Symfony's 404 page is not displayed)
	# location /bundles {
	#     try_files $uri =404;
	# }

	location / {
		try_files $uri @pass_to_symfony_dev;
	}

	location @pass_to_symfony{
		rewrite ^ /app.php$request_uri last;
	}

	location @pass_to_symfony_dev{
		rewrite ^ /app_dev.php$request_uri last;
	}

	location ~ ^/(app(_dev)?|config)\.php(/|$) {
		# include fastcgi_params;
		include '%sprogdir%/userdata/config/nginx_fastcgi_params.txt';
		fastcgi_pass backend;
		fastcgi_split_path_info ^(.+\.php)(/.*)$;
		# When you are using symlinks to link the document root to the
		# current version of your application, you should pass the real
		# application path instead of the path to the symlink to PHP
		# FPM.
		# Otherwise, PHP's OPcache may not properly detect changes to
		# your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
		# for more information).
		fastcgi_param DOCUMENT_ROOT $realpath_root;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		# Prevents URIs that include the front controller. This will 404:
		# http://domain.tld/app.php/some-path
		# Remove the internal directive to allow URIs like this
		# Accessible only by redirects.
		# internal;
	}

	# return 404 for all other php files not matching the front controller
	location ~ \.php$ {
		return 404;
	}

	error_log '%hostdir%/app/logs/nginx/error.log';
	access_log '%hostdir%/app/logs/nginx/access.log';


	# Service configuration (do not edit!)
	# ----------------------------
	location /openserver/ {
		root      '%sprogdir%/modules/system/html';
		autoindex off;
		index     index.php index.html index.htm;

		%allow%allow all;
		allow 127.0.0.0/8;
		allow ::1/128;
		allow %ips%;
		deny all;

		location ~* ^/openserver/.+\.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv|svgz?|ttf|ttc|otf|eot|woff2?)$ {
			expires 1d;
			access_log off;
		}

		location /openserver/server-status {
			stub_status on;
		}

		location ~ ^/openserver/.*\.php$ {
			try_files      $fastcgi_script_name =404;
			fastcgi_index  index.php;
			fastcgi_pass   backend;
			include        '%sprogdir%/userdata/config/nginx_fastcgi_params.txt';
		}
	}
	# End service configuration
	# ----------------------------
}
